<!DOCTYPE html>

<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>부대원 - 청소구역 조회</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

```
    body {
        font-family: 'Noto Sans KR', Arial, sans-serif;
        background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%);
        min-height: 100vh;
        padding: 20px;
    }
    
    .container {
        max-width: 800px;
        margin: 0 auto;
        background: white;
        border-radius: 20px;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);
        overflow: hidden;
    }
    
    .header {
        background: linear-gradient(90deg, #4CAF50, #45a049);
        color: white;
        padding: 30px;
        text-align: center;
        position: relative;
    }
    
    .header h1 {
        font-size: 2.5em;
        margin-bottom: 10px;
        text-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
    }
    
    .refresh-btn {
        position: absolute;
        top: 20px;
        right: 20px;
        padding: 10px;
        border: 2px solid white;
        background: transparent;
        color: white;
        border-radius: 50%;
        cursor: pointer;
        transition: all 0.3s ease;
        font-size: 1.2em;
        width: 50px;
        height: 50px;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .refresh-btn:hover {
        background: white;
        color: #4CAF50;
        transform: rotate(180deg);
    }
    
    .content {
        padding: 30px;
    }
    
    .user-panel {
        background: linear-gradient(45deg, #FF6B6B, #4ECDC4);
        color: white;
        padding: 20px;
        border-radius: 15px;
        margin-bottom: 20px;
        text-align: center;
    }
    
    .change-user-btn {
        padding: 8px 15px;
        background: rgba(255, 255, 255, 0.2);
        color: white;
        border: 1px solid white;
        border-radius: 15px;
        cursor: pointer;
        font-size: 0.9em;
        margin-top: 10px;
    }
    
    .status-panel {
        background: #f8f9fa;
        padding: 20px;
        border-radius: 15px;
        margin-bottom: 30px;
        text-align: center;
    }
    
    .status-indicator-large {
        width: 15px;
        height: 15px;
        border-radius: 50%;
        display: inline-block;
    }
    
    .online { background: #4CAF50; }
    .offline { background: #f44336; }
    
    .notification-panel {
        background: linear-gradient(45deg, #667eea, #764ba2);
        color: white;
        padding: 25px;
        border-radius: 15px;
        text-align: center;
        margin-bottom: 30px;
    }
    
    .notification-btn {
        padding: 12px 25px;
        background: rgba(255, 255, 255, 0.2);
        color: white;
        border: 2px solid white;
        border-radius: 25px;
        cursor: pointer;
        transition: all 0.3s ease;
        font-weight: bold;
        margin: 10px;
    }
    
    .notification-btn:hover {
        background: white;
        color: #667eea;
    }
    
    .notification-btn.enabled {
        background: #4CAF50;
        border-color: #4CAF50;
    }
    
    .areas-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }
    
    .area-card {
        background: linear-gradient(135deg, #667eea, #764ba2);
        color: white;
        padding: 25px;
        border-radius: 20px;
        text-align: center;
        position: relative;
        overflow: hidden;
        transition: all 0.3s ease;
    }
    
    .area-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 15px 40px rgba(102, 126, 234, 0.4);
    }
    
    .area-card::before {
        content: '';
        position: absolute;
        top: -50%;
        left: -50%;
        width: 200%;
        height: 200%;
        background: linear-gradient(45deg, transparent, rgba(255, 255, 255, 0.1), transparent);
        transform: rotate(45deg);
        animation: shimmer 3s infinite;
    }
    
    @keyframes shimmer {
        0% { transform: translateX(-100%) rotate(45deg); }
        100% { transform: translateX(100%) rotate(45deg); }
    }
    
    .area-title {
        font-size: 1.3em;
        font-weight: bold;
        margin-bottom: 15px;
        position: relative;
        z-index: 1;
    }
    
    .assigned-person {
        font-size: 1.5em;
        font-weight: bold;
        background: rgba(255, 255, 255, 0.2);
        padding: 15px;
        border-radius: 15px;
        position: relative;
        z-index: 1;
    }
    
    .empty-slot {
        font-style: italic;
        opacity: 0.7;
    }
    
    .my-assignment {
        background: linear-gradient(135deg, #FF6B6B, #4ECDC4) !important;
        border: 3px solid #FFD93D;
        animation: pulse 2s infinite;
    }
    
    @keyframes pulse {
        0% { box-shadow: 0 0 0 0 rgba(255, 217, 61, 0.7); }
        70% { box-shadow: 0 0 0 15px rgba(255, 217, 61, 0); }
        100% { box-shadow: 0 0 0 0 rgba(255, 217, 61, 0); }
    }
    
    .info-section {
        background: #e8f5e8;
        padding: 20px;
        border-radius: 15px;
        border-left: 5px solid #4CAF50;
    }
    
    .info-list {
        list-style: none;
        padding: 0;
    }
    
    .info-list li {
        padding: 8px 0;
        border-bottom: 1px solid rgba(76, 175, 80, 0.2);
        color: #2e7d32;
    }
    
    .info-list li:last-child {
        border-bottom: none;
    }
    
    .notification {
        position: fixed;
        top: 20px;
        right: 20px;
        background: #4CAF50;
        color: white;
        padding: 15px 25px;
        border-radius: 10px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        transform: translateX(300px);
        transition: transform 0.3s ease;
        z-index: 1000;
    }
    
    .notification.show {
        transform: translateX(0);
    }
    
    .notification.error {
        background: #f44336;
    }
    
    .last-update {
        text-align: center;
        color: #666;
        font-size: 0.9em;
        margin-top: 20px;
        padding: 15px;
        background: #f8f9fa;
        border-radius: 10px;
    }
    
    .firebase-error {
        background: #ffebee;
        color: #c62828;
        padding: 20px;
        border-radius: 15px;
        margin-bottom: 20px;
        border-left: 5px solid #f44336;
        text-align: center;
    }
    
    .retry-btn {
        background: #f44336;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
        margin-top: 10px;
    }
    
    @media (max-width: 768px) {
        .header h1 {
            font-size: 1.8em;
        }
        
        .refresh-btn {
            position: relative;
            top: auto;
            right: auto;
            margin-top: 15px;
        }
        
        .areas-grid {
            grid-template-columns: 1fr;
        }
        
        .notification-panel {
            padding: 20px 15px;
        }
        
        .notification-btn {
            display: block;
            width: 100%;
            margin: 10px 0;
        }
    }
</style>
```

</head>
<body>
    <div class="container">
        <div class="header">
            <h1>👥 부대원 - 청소구역 조회</h1>
            <button class="refresh-btn" onclick="refreshData()" title="새로고침">
                🔄
            </button>
        </div>

```
    <div class="content">
        <div class="user-panel">
            <h3>👤 현재 사용자: <span id="currentUserName">-</span></h3>
            <button class="change-user-btn" onclick="changeUser()">사용자 변경</button>
        </div>

        <div id="firebaseError" class="firebase-error" style="display: none;">
            <h3>⚠️ Firebase 연결 실패</h3>
            <p>관리자에게 Firebase 설정을 요청하거나 잠시 후 다시 시도해주세요.</p>
            <button class="retry-btn" onclick="initializeFromUrl()">다시 시도</button>
        </div>

        <div class="status-panel">
            <h3>
                <span class="status-indicator-large" id="firebaseStatus"></span>
                연결 상태: <span id="connectionStatus">연결 중...</span>
            </h3>
            <p>마지막 업데이트: <span id="lastUpdate">-</span></p>
        </div>
        
        <div class="notification-panel">
            <h3>🔔 실시간 알림 설정</h3>
            <p style="margin-bottom: 15px;">새로운 청소구역이 배정되면 브라우저 알림을 받을 수 있습니다.</p>
            <button class="notification-btn" id="notificationBtn" onclick="toggleNotifications()">
                알림 허용하기
            </button>
            <p style="font-size: 0.9em; margin-top: 10px; opacity: 0.8;">
                알림 권한 상태: <span id="notificationStatus">확인 중...</span>
            </p>
        </div>
        
        <h2 style="margin-bottom: 20px; color: #333; text-align: center;">📋 오늘의 청소구역</h2>
        
        <div class="areas-grid" id="areasGrid">
            <!-- 구역 카드들이 여기에 생성됩니다 -->
        </div>
        
        <div class="info-section">
            <h3 style="color: #2e7d32; margin-bottom: 15px;">📢 안내사항</h3>
            <ul class="info-list">
                <li>✅ 내가 배정된 구역은 노란색 테두리와 애니메이션으로 표시됩니다</li>
                <li>🔄 관리자가 새로 배정하면 자동으로 화면이 업데이트됩니다</li>
                <li>🔔 알림을 허용하면 배정 변경 시 즉시 브라우저 알림을 받습니다</li>
                <li>📱 모바일에서도 정상적으로 이용 가능합니다</li>
                <li>🔄 새로고침 버튼으로 수동 업데이트도 가능합니다</li>
            </ul>
        </div>
        
        <div class="last-update">
            <strong>📅 마지막 배정 시간:</strong> <span id="assignmentTime">아직 배정되지 않음</span>
        </div>
    </div>
</div>

<div class="notification" id="notification">
    새로운 청소구역이 배정되었습니다!
</div>

<!-- Firebase SDK -->
<script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-app-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-database-compat.js"></script>

<script>
    // 청소구역 (5개)
    const areas = [
        '생활관 1층', '생활관 2층', '화장실/세면장', 
        '복도/계단', '외부청소'
    ];
    
    let currentAssignments = {};
    let currentUser = null;
    let notificationPermission = 'default';
    let firebaseApp = null;
    let database = null;
    let lastNotificationTimestamp = 0;
    
    // 페이지 로드시 초기화
    window.addEventListener('load', function() {
        init();
    });
    
    // 초기화
    function init() {
        loadCurrentUser();
        checkNotificationPermission();
        initializeFromUrl();
        updateConnectionStatus(false, '연결 중...');
    }
    
    // URL에서 Firebase 설정 가져오기 (관리자 페이지와 같은 도메인)
    function initializeFromUrl() {
        // 같은 도메인의 관리자 설정을 사용하려고 시도
        const adminUrl = window.location.origin + window.location.pathname.replace('member.html', 'admin.html');
        
        // localStorage에서 Firebase 설정 확인
        try {
            const savedConfig = localStorage.getItem('firebaseConfig');
            if (savedConfig) {
                const config = JSON.parse(savedConfig);
                initializeFirebase(config);
            } else {
                // 설정이 없으면 URL 기반으로 추정
                showFirebaseError();
            }
        } catch (error) {
            showFirebaseError();
        }
    }
    
    // Firebase 초기화
    function initializeFirebase(config) {
        try {
            if (firebaseApp) {
                firebaseApp.delete();
            }
            
            firebaseApp = firebase.initializeApp(config);
            database = firebase.database();
            
            updateConnectionStatus(true, '연결됨');
            setupFirebaseListeners();
            loadDataFromFirebase();
            
            document.getElementById('firebaseError').style.display = 'none';
            
        } catch (error) {
            console.error('Firebase 초기화 실패:', error);
            showFirebaseError();
        }
    }
    
    // Firebase 오류 표시
    function showFirebaseError() {
        updateConnectionStatus(false, 'Firebase 설정 필요');
        document.getElementById('firebaseError').style.display = 'block';
    }
    
    // 현재 사용자 로드
    function loadCurrentUser() {
        const savedUser = localStorage.getItem('memberCurrentUser');
        if (savedUser) {
            currentUser = savedUser;
            document.getElementById('currentUserName').textContent = currentUser;
        } else {
            changeUser();
        }
    }
    
    // 사용자 변경
    function changeUser() {
        const userName = prompt('이름을 입력해주세요:', currentUser || '');
        if (userName && userName.trim()) {
            currentUser = userName.trim();
            localStorage.setItem('memberCurrentUser', currentUser);
            document.getElementById('currentUserName').textContent = currentUser;
            renderAreasGrid();
        }
    }
    
    // 알림 권한 확인
    function checkNotificationPermission() {
        if ('Notification' in window) {
            notificationPermission = Notification.permission;
            updateNotificationUI();
        } else {
            document.getElementById('notificationStatus').textContent = '지원하지 않음';
            document.getElementById('notificationBtn').disabled = true;
        }
    }
    
    // 알림 UI 업데이트
    function updateNotificationUI() {
        const btn = document.getElementById('notificationBtn');
        const status = document.getElementById('notificationStatus');
        
        switch(notificationPermission) {
            case 'granted':
                btn.textContent = '✅ 알림 활성화됨';
                btn.classList.add('enabled');
                status.textContent = '허용됨';
                break;
            case 'denied':
                btn.textContent = '❌ 알림 차단됨';
                btn.classList.remove('enabled');
                status.textContent = '차단됨';
                break;
            default:
                btn.textContent = '🔔 알림 허용하기';
                btn.classList.remove('enabled');
                status.textContent = '대기중';
        }
    }
    
    // 알림 토글
    function toggleNotifications() {
        if (!('Notification' in window)) {
            showNotification('이 브라우저는 알림을 지원하지 않습니다', 'error');
            return;
        }
        
        if (notificationPermission === 'granted') {
            showNotification('알림이 이미 활성화되어 있습니다');
            return;
        }
        
        Notification.requestPermission().then(permission => {
            notificationPermission = permission;
            updateNotificationUI();
            
            if (permission === 'granted') {
                showNotification('알림이 허용되었습니다!');
            } else {
                showNotification('알림이 거부되었습니다', 'error');
            }
        });
    }
    
    // 연결 상태 업데이트
    function updateConnectionStatus(isConnected, message) {
        const statusIndicator = document.getElementById('firebaseStatus');
        const statusText = document.getElementById('connectionStatus');
        
        if (isConnected) {
            statusIndicator.className = 'status-indicator-large online';
            statusText.textContent = '연결됨';
        } else {
            statusIndicator.className = 'status-indicator-large offline';
            statusText.textContent = message || '연결 안됨';
        }
        
        document.getElementById('lastUpdate').textContent = new Date().toLocaleString('ko-KR');
    }
    
    // Firebase에서 데이터 로드
    function loadDataFromFirebase() {
        if (!database) return;
        
        database.ref('assignments').once('value')
            .then((snapshot) => {
                const data = snapshot.val();
                if (data) {
                    currentAssignments = data;
                    renderAreasGrid();
                }
            })
            .catch((error) => {
                console.error('데이터 로드 실패:', error);
                showNotification('데이터 로드에 실패했습니다', 'error');
            });
        
        database.ref('lastUpdated').once('value')
            .then((snapshot) => {
                const timestamp = snapshot.val();
                if (timestamp) {
                    document.getElementById('assignmentTime').textContent = 
                        new Date(timestamp).toLocaleString('ko-KR');
                }
            });
    }
    
    // Firebase 리스너 설정
    function setupFirebaseListeners() {
        if (!database) return;
        
        // 배정 변경 실시간 감지
        database.ref('assignments').on('value', (snapshot) => {
            const data = snapshot.val();
            if (data) {
                const hasChanges = JSON.stringify(currentAssignments) !== JSON.stringify(data);
                currentAssignments = data;
                renderAreasGrid();
                
                if (hasChanges && Object.keys(currentAssignments).length > 0) {
                    showNotification('새로운 청소구역이 배정되었습니다!');
                    
                    // 브라우저 알림
                    if (notificationPermission === 'granted') {
                        const assignedPeople = Object.values(currentAssignments).filter(person => person);
                        new Notification('🧹 청소구역 배정 알림', {
                            body: `새로운 청소구역이 배정되었습니다! (${assignedPeople.length}명 배정)`,
                            icon: '🧹'
                        });
                    }
                }
            }
        });
        
        // 알림 감지
        database.ref('notification').on('value', (snapshot) => {
            const data = snapshot.val();
            if (data && data.timestamp > lastNotificationTimestamp) {
                lastNotificationTimestamp = data.timestamp;
                
                showNotification(data.message || '새로운 알림이 있습니다');
                
                if (notificationPermission === 'granted') {
                    new Notification('🧹 청소구역 배정 알림', {
                        body: data.message || '새로운 청소구역이 배정되었습니다',
                        icon: '🧹'
                    });
                }
            }
        });
        
        // 마지막 업데이트 시간 감지
        database.ref('lastUpdated').on('value', (snapshot) => {
            const timestamp = snapshot.val();
            if (timestamp) {
                document.getElementById('lastUpdate').textContent = 
                    new Date().toLocaleString('ko-KR');
                document.getElementById('assignmentTime').textContent = 
                    new Date(timestamp).toLocaleString('ko-KR');
            }
        });
        
        // 연결 상태 모니터링
        database.ref('.info/connected').on('value', (snapshot) => {
            const connected = snapshot.val();
            updateConnectionStatus(connected, connected ? '연결됨' : '연결 끊어짐');
        });
    }
    
    // 구역 그리드 렌더링
    function renderAreasGrid() {
        const grid = document.getElementById('areasGrid');
        grid.innerHTML = '';
        
        areas.forEach(area => {
            const card = document.createElement('div');
            const assignedPerson = currentAssignments[area];
            
            // 현재 사용자가 배정된 구역인지 확인
            const isMyAssignment = assignedPerson === currentUser;
            
            card.className = `area-card ${isMyAssignment ? 'my-assignment' : ''}`;
            
            card.innerHTML = `
                <div class="area-title">
                    ${area} ${isMyAssignment ? '⭐' : ''}
                </div>
                <div class="assigned-person ${!assignedPerson ? 'empty-slot' : ''}">
                    ${assignedPerson || '배정 없음'}
                    ${isMyAssignment ? '<br><small>🎯 나의 담당구역</small>' : ''}
                </div>
            `;
            grid.appendChild(card);
        });
    }
    
    // 데이터 새로고침
    function refreshData() {
        showNotification('데이터를 새로고침 중입니다...');
        
        if (database) {
            loadDataFromFirebase();
        } else {
            initializeFromUrl();
        }
        
        updateConnectionStatus(database ? true : false, 
            database ? '새로고침 완료' : '연결 시도 중...');
    }
    
    // 알림 표시
    function showNotification(message, type = 'success') {
        const notification = document.getElementById('notification');
        notification.textContent = message;
        notification.className = `notification ${type}`;
        notification.classList.add('show');
        
        setTimeout(() => {
            notification.classList.remove('show');
        }, 3000);
    }
</script>
```

</body>
</html>